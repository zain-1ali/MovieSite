{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\it\\\\Desktop\\\\React Movie Project\\\\mysite\\\\src\\\\SingleMovie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { url } from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SingleMovie = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  let [isLoading, setisLoading] = useState(true);\n  let [movie, setmovie] = useState(\"\");\n  let [error1, seterror1] = useState({\n    show: false,\n    error: \"\"\n  });\n\n  const getMovies = async myUrl => {\n    try {\n      const res = await fetch(myUrl);\n      const data = await res.json();\n      console.log(data);\n\n      if (data.Response === 'True') {\n        setisLoading(false);\n        setmovie(data);\n      } else {\n        seterror1({\n          show: true,\n          error: data.Error\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    let tmer = setTimeout(() => {\n      getMovies(`${url}&i=${id}`);\n    }, 2000);\n    return () => {\n      clearTimeout(tmer);\n      console.log(\"clear\");\n    };\n  }, [id]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"movie-section \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"movie-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: movie.Poster,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: movie.Title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: movie.Released\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: movie.Genre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: [movie.imdbRating, \" / 10\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: movie.Country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n              to: \"/\",\n              className: \"back-btn\",\n              children: \"Go Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleMovie, \"tqzkonKX+BYrv7VMhzAeONdnz38=\", false, function () {\n  return [useParams];\n});\n\n_c = SingleMovie;\nexport default SingleMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleMovie\");","map":{"version":3,"names":["React","useEffect","useState","useParams","url","SingleMovie","id","isLoading","setisLoading","movie","setmovie","error1","seterror1","show","error","getMovies","myUrl","res","fetch","data","json","console","log","Response","Error","tmer","setTimeout","clearTimeout","Poster","Title","Released","Genre","imdbRating","Country"],"sources":["C:/Users/it/Desktop/React Movie Project/mysite/src/SingleMovie.js"],"sourcesContent":["import React ,{useEffect,useState} from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport {url} from './context'\r\n\r\nconst SingleMovie = () => {\r\n  const {id} = useParams()\r\n  let [isLoading , setisLoading]=useState(true)\r\n    let [movie , setmovie]=useState(\"\")\r\n    let [error1 , seterror1]=useState({show : false , error : \"\"})\r\n  \r\n    \r\n     const getMovies = async(myUrl)=>{\r\n        try {\r\n            const res = await fetch(myUrl);\r\n            const data = await res.json()\r\n            console.log(data)\r\n            if (data.Response==='True') {\r\n                setisLoading(false)\r\n                setmovie(data)\r\n            }\r\n            else{\r\n                seterror1({\r\n                    show : true,\r\n                    error : data.Error\r\n                })\r\n    \r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n     }\r\n     useEffect(()=>{\r\n        let tmer=setTimeout(()=>{\r\n            getMovies(`${url}&i=${id}`);\r\n            \r\n        },2000)\r\n        return () => {\r\n            clearTimeout(tmer);\r\n            console.log(\"clear\");\r\n          };\r\n        \r\n     },[id])\r\n     if (isLoading) {\r\n      return (\r\n        <section className=\"movie-section \">\r\n          <div className=\"loading\">Loading....</div>;\r\n        </section>\r\n      );\r\n    }\r\n  return (\r\n    <>\r\n    <div>\r\n    <section className=\"movie-section\">\r\n      <div className=\"movie-card\">\r\n        <figure>\r\n          <img src={movie.Poster} alt=\"\" />\r\n        </figure>\r\n        <div className=\"card-content\">\r\n          <p className=\"title\">{movie.Title}</p>\r\n          <p className=\"\"></p>\r\n          <p className=\"card-text\">{movie.Released}</p>\r\n          <p className=\"card-text\">{movie.Genre}</p>\r\n          <p className=\"card-text\">{movie.imdbRating} / 10</p>\r\n          <p className=\"card-text\">{movie.Country}</p>\r\n          <NavLink to=\"/\" className=\"back-btn\">\r\n            Go Back\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleMovie\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
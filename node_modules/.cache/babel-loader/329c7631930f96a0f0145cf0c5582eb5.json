{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\it\\\\Desktop\\\\React Movie Project\\\\mysite\\\\src\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const url = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_API}`;\nconst AppContext = /*#__PURE__*/React.createContext();\n\nlet AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [isLoading, setisLoading] = useState(true);\n  let [movie, setmovie] = useState([]);\n  let [error1, seterror1] = useState({\n    show: false,\n    error: \"\"\n  });\n  let [query, setquery] = useState(\"stranger things\");\n\n  const getMovies = async myUrl => {\n    setisLoading(true);\n\n    try {\n      const res = await fetch(myUrl);\n      const data = await res.json();\n      console.log(data);\n\n      if (data.Response === 'True') {\n        setisLoading(false);\n        setmovie(data.Search);\n      } else {\n        seterror1({\n          show: true,\n          error: data.Error\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    let tmer = setTimeout(() => {\n      getMovies(`${url}&s=${query}`);\n    }, 2000);\n    return () => {\n      clearTimeout(tmer);\n      console.log(\"clear\");\n    };\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      movie,\n      error1,\n      query,\n      setquery\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 13\n  }, this);\n};\n\n_s(AppProvider, \"msSfQI8F11U9QIx7V3dOYyLM7EE=\");\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","url","process","env","REACT_APP_API","AppContext","createContext","AppProvider","children","isLoading","setisLoading","movie","setmovie","error1","seterror1","show","error","query","setquery","getMovies","myUrl","res","fetch","data","json","console","log","Response","Search","Error","tmer","setTimeout","clearTimeout","useGlobalContext"],"sources":["C:/Users/it/Desktop/React Movie Project/mysite/src/context.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\r\n\r\nexport const url = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_API}`;\r\n\r\nconst AppContext = React.createContext();\r\n\r\n\r\nlet AppProvider = ({children}) => {\r\n    let [isLoading , setisLoading]=useState(true)\r\n    let [movie , setmovie]=useState([])\r\n    let [error1 , seterror1]=useState({show : false , error : \"\"})\r\n    let [query, setquery]=useState(\"stranger things\")\r\n    \r\n     const getMovies = async(myUrl)=>{\r\n        setisLoading(true);\r\n        try {\r\n            const res = await fetch(myUrl);\r\n            const data = await res.json()\r\n            console.log(data)\r\n            if (data.Response==='True') {\r\n                setisLoading(false)\r\n                setmovie(data.Search)\r\n            }\r\n            else{\r\n                seterror1({\r\n                    show : true,\r\n                    error : data.Error\r\n                })\r\n    \r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n     }\r\n     useEffect(()=>{\r\n        let tmer=setTimeout(()=>{\r\n            getMovies(`${url}&s=${query}`);\r\n            \r\n        },2000)\r\n        return () => {\r\n            clearTimeout(tmer);\r\n            console.log(\"clear\");\r\n          };\r\n        \r\n     },[query])\r\n    \r\n    \r\n    \r\n    return( <AppContext.Provider value={{movie,error1,query, setquery}}>{children}</AppContext.Provider>);\r\n  \r\n}\r\n\r\nconst useGlobalContext=()=>{\r\n  return  useContext(AppContext)\r\n}\r\n\r\n\r\n\r\n\r\nexport {AppContext,AppProvider,useGlobalContext};\r\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;;AAEA,OAAO,MAAMC,GAAG,GAAI,kCAAiCC,OAAO,CAACC,GAAR,CAAYC,aAAc,EAAxE;AAEP,MAAMC,UAAU,gBAAGR,KAAK,CAACS,aAAN,EAAnB;;AAGA,IAAIC,WAAW,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAC9B,IAAI,CAACC,SAAD,EAAaC,YAAb,IAA2BV,QAAQ,CAAC,IAAD,CAAvC;EACA,IAAI,CAACW,KAAD,EAASC,QAAT,IAAmBZ,QAAQ,CAAC,EAAD,CAA/B;EACA,IAAI,CAACa,MAAD,EAAUC,SAAV,IAAqBd,QAAQ,CAAC;IAACe,IAAI,EAAG,KAAR;IAAgBC,KAAK,EAAG;EAAxB,CAAD,CAAjC;EACA,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAkBlB,QAAQ,CAAC,iBAAD,CAA9B;;EAEC,MAAMmB,SAAS,GAAG,MAAMC,KAAN,IAAc;IAC7BV,YAAY,CAAC,IAAD,CAAZ;;IACA,IAAI;MACA,MAAMW,GAAG,GAAG,MAAMC,KAAK,CAACF,KAAD,CAAvB;MACA,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;MACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;;MACA,IAAIA,IAAI,CAACI,QAAL,KAAgB,MAApB,EAA4B;QACxBjB,YAAY,CAAC,KAAD,CAAZ;QACAE,QAAQ,CAACW,IAAI,CAACK,MAAN,CAAR;MACH,CAHD,MAII;QACAd,SAAS,CAAC;UACNC,IAAI,EAAG,IADD;UAENC,KAAK,EAAGO,IAAI,CAACM;QAFP,CAAD,CAAT;MAKH;IACJ,CAfD,CAeE,OAAOb,KAAP,EAAc;MACZS,OAAO,CAACC,GAAR,CAAYV,KAAZ;IACH;EAEH,CArBD;;EAsBAjB,SAAS,CAAC,MAAI;IACX,IAAI+B,IAAI,GAACC,UAAU,CAAC,MAAI;MACpBZ,SAAS,CAAE,GAAElB,GAAI,MAAKgB,KAAM,EAAnB,CAAT;IAEH,CAHkB,EAGjB,IAHiB,CAAnB;IAIA,OAAO,MAAM;MACTe,YAAY,CAACF,IAAD,CAAZ;MACAL,OAAO,CAACC,GAAR,CAAY,OAAZ;IACD,CAHH;EAKF,CAVQ,EAUP,CAACT,KAAD,CAVO,CAAT;EAcD,oBAAQ,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAE;MAACN,KAAD;MAAOE,MAAP;MAAcI,KAAd;MAAqBC;IAArB,CAA5B;IAAA,UAA6DV;EAA7D;IAAA;IAAA;IAAA;EAAA,QAAR;AAEH,CA5CD;;GAAID,W;;KAAAA,W;;AA8CJ,MAAM0B,gBAAgB,GAAC,MAAI;EAAA;;EACzB,OAAQnC,UAAU,CAACO,UAAD,CAAlB;AACD,CAFD;;IAAM4B,gB;;AAON,SAAQ5B,UAAR,EAAmBE,WAAnB,EAA+B0B,gBAA/B"},"metadata":{},"sourceType":"module"}